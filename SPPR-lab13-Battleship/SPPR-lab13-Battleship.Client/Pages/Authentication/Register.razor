@page "/account/register"
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveWebAssembly
@inject NavigationManager Navigation
@inject HttpClient httpClient

<h3>Регистрация</h3>

<EditForm Model="registerModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label asp-for="Username">Имя пользователя</label>
        <InputText @bind-Value="registerModel.Username" />
        <ValidationMessage For="@(() => registerModel.Username)" />
    </div>

    <div>
        <label asp-for="Email">Электронная почта</label>
        <InputText @bind-Value="registerModel.Email" />
        <ValidationMessage For="@(() => registerModel.Email)" />
    </div>

    <div>
        <label asp-for="Password">Пароль</label>
        <InputText @bind-Value="registerModel.Password" type="password" />
        <ValidationMessage For="@(() => registerModel.Password)" />
    </div>

    <div>
        <label asp-for="ConfirmPassword">Подтвердите пароль</label>
        <InputText @bind-Value="registerModel.ConfirmPassword" type="password" />
        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
    </div>

    <button type="submit">Зарегистрироваться</button>
</EditForm>

@if (registrationError != null)
{
    <div class="alert alert-danger">@registrationError</div>
}

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string? registrationError;

    private async Task HandleRegister()
    {
        try {

            Console.WriteLine(registerModel.Username);

            // var response = await httpClient.PostAsJsonAsync("api/account/register", registerModel); 
            // if (response.IsSuccessStatusCode) 
            // { 
            //     Navigation.NavigateTo("/"); 
            // } 
            // else 
            // { 
            //     registrationError = "Ошибка регистрации. Пожалуйста, попробуйте снова."; 
            // } 
        } 
        catch (Exception ex) 
        { 
            registrationError = $"Ошибка: {ex.Message}"; 
        }
    }

    public class RegisterModel { 
        
        [Required(ErrorMessage = "Имя пользователя обязательно")] 
        public string Username { get; set; } = string.Empty; 
    
        [Required(ErrorMessage = "Электронная почта обязательна")]
        [EmailAddress(ErrorMessage = "Некорректный адрес электронной почты")] 
        public string Email { get; set; } = string.Empty; 
        
        [Required(ErrorMessage = "Пароль обязателен")]
        [MinLength(6, ErrorMessage = "Пароль должен содержать не менее 6 символов")] 
        public string Password { get; set; } = string.Empty; 
        
        [Required(ErrorMessage = "Подтверждение пароля обязательно")]
        [Compare("Password", ErrorMessage = "Пароли не совпадают")] 
        public string ConfirmPassword { get; set; } = string.Empty; 
    }
}